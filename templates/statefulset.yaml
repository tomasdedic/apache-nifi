---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apache-nifi.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
{{- if .Values.sts.pod.annotations }}
      annotations:
{{ toYaml .Values.sts.pod.annotations | indent 8 }}
{{- else }}
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
{{- end }}
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
{{- if .Values.sts.useHostNetwork }}
      hostNetwork: {{ .Values.sts.useHostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      serviceAccountName: {{ include "apache-nifi.serviceAccountName" . }}
      {{- if eq .Values.sts.AntiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end}}
{{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
      initContainers:
      - name: treemaker
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command:
        - sh
        - -c
        - |
          cd /tree
          [ -d data ] || mkdir -p data
          [ -d nifi-current/auth-conf ] || mkdir -p nifi-current/auth-conf
{{- if .Values.properties.clusterSecure }}
          [ -d nifi-current/config-data ] || mkdir -p nifi-current/config-data 
{{- end }}
          [ -d flowfile_repository ] || mkdir -p flowfile_repository
          [ -d content_repository ] || mkdir -p content_repository
          [ -d provenance_repository ] || mkdir -p provenance_repository
          [ -d nifi-current/logs ] || mkdir -p nifi-current/logs
        volumeMounts:
        - name: "nifidata"
          mountPath: "/tree"
{{- if .Values.properties.isNode }}
      - name: zookeeper
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command:
        - sh
        - -c
        - |
          echo trying to contact {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}
          until nc -vzw 1 {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}; do
            echo "waiting for zookeeper..."
            sleep 2
          done
{{- end }}
{{- if .Values.ca.enabled }}
      - name: cert-request
        imagePullPolicy: {{ .Values.ca.image.pullPolicy | quote }}
        image: "{{ .Values.ca.image.repository }}:{{ .Values.ca.image.tag }}"
        command:
        - bash
        - -c
        - |
          CA_ADDRESS="{{ template "ca.server" . }}:{{ .Values.ca.service.port }}"
          until echo "" | timeout -t 2 openssl s_client -connect "${CA_ADDRESS}"; do
            # Checking if ca server using nifi-toolkit is up
            echo "Waiting for CA to be available at ${CA_ADDRESS}"
            sleep 2
          done;
          # generate node cert function
          generate_node_cert() {
           ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client \
            -c "{{ template "ca.server" . }}" \
            -t {{ .Values.ca.token }} \
{{- if .Values.properties.webProxyHost }}
            --subjectAlternativeNames {{ .Values.properties.webProxyHost }}, $(hostname -f) \
{{- else }}
            --subjectAlternativeNames {{ template "apache-nifi.fullname" . }}.{{ .Release.Namespace }}.svc \
{{- end }}
            -D "CN=$(hostname -f), OU=NIFI" \
            -p {{ .Values.ca.service.port }}
            }
          # generate admin cert function
          generate_admin_cert() {
          ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client \
            -c "{{ template "ca.server" . }}" \
            -t {{ .Values.ca.token }} \
{{- if .Values.properties.webProxyHost }}
            --subjectAlternativeNames {{ .Values.properties.webProxyHost }}, {{ template "apache-nifi.fullname" . }}.{{ .Release.Namespace }}.svc \
{{- else }}
            --subjectAlternativeNames {{ template "apache-nifi.fullname" . }}.{{ .Release.Namespace }}.svc \
{{- end }}
            -p {{ .Values.ca.service.port }} \
            -D "CN={{ .Values.ca.admin.cn }}, OU=NIFI" \
            -T PKCS12
          export PASS=$(jq -r .keyStorePassword config.json)
          openssl pkcs12 -in "keystore.pkcs12" -out "keyAdmin.pem" -nocerts -nodes -password "env:PASS"
          openssl pkcs12 -in "keystore.pkcs12" -out "crtAdmin.pem" -clcerts -nokeys -password "env:PASS"
          openssl pkcs12 -export -inkey "keyAdmin.pem" -in "crtAdmin.pem" -out "certAdmin.p12" -passout pass:
          }

          cd /data/config-data
          #certs generating (reuse old certs if available)
          # 1. nifi node cert
          if [ ! -d certs ];then
            mkdir certs
            cd certs
          # Generate certificate for server with webProxyHost
            generate_node_cert
          else
            cd certs
            if [ ! -f config.json ] || [ ! -f keystore.jks ] || [ ! -f truststore.jks ];then 
            rm -f *
            generate_node_cert
            fi
          fi

          if [ ! -d admin ];then
            mkdir admin
            cd admin
            #generate admin client cert for browser
            generate_admin_cert
          else
            cd admin
            if [ ! -f config.json ] || [ ! -f keystore.pkcs12 ];then
            rm -f *
            generate_admin_cert
            fi
          fi
        volumeMounts:
          - name: "nifidata"
            mountPath: /data/config-data
            subPath: nifi-current/config-data
{{- end }}
{{- range $key, $value := .Values.initContainers }}
      - name: {{ $key }}
{{ toYaml $value | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
{{- if .Values.extraContainers }}
{{- toYaml .Values.extraContainers | nindent 6 }}
{{- end }}
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command:
        - bash
        - -ce
        - |
          prop_replace () {
            target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
            echo "updating ${1} in ${target_file}"
            if egrep "^${1}=" ${target_file} &> /dev/null; then
              sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
            else
              echo ${1}=${2} >> ${target_file}
            fi
          }

          mkdir -p ${NIFI_HOME}/config-data/conf
          FQDN=$(hostname -f)

          cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"

          if [[ $(grep $(hostname) conf/authorizers.temp) ]]; then
            cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
          else
            cat "${NIFI_HOME}/conf/authorizers.empty" > "${NIFI_HOME}/conf/authorizers.xml"
          fi

          if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
            gzip /opt/nifi/data/flow.xml
          fi

          prop_replace nifi.remote.input.host ${FQDN}
          prop_replace nifi.cluster.node.address ${FQDN}
          prop_replace nifi.zookeeper.connect.string ${NIFI_ZOOKEEPER_CONNECT_STRING}
          prop_replace nifi.web.http.host ${FQDN}

{{- if .Values.properties.clusterSecure }}
          # Update nifi.properties for security properties
          prop_replace nifi.web.https.host ${FQDN}
          prop_replace nifi.security.keystoreType jks
          prop_replace nifi.security.keystore   ${NIFI_HOME}/config-data/certs/keystore.jks
          prop_replace nifi.security.keystorePasswd     $(jq -r .keyStorePassword ${NIFI_HOME}/config-data/certs/config.json)
          prop_replace nifi.security.keyPasswd          $(jq -r .keyPassword ${NIFI_HOME}/config-data/certs/config.json)
          prop_replace nifi.security.truststoreType jks
          prop_replace nifi.security.truststore   ${NIFI_HOME}/config-data/certs/truststore.jks
          prop_replace nifi.security.truststorePasswd   $(jq -r .trustStorePassword ${NIFI_HOME}/config-data/certs/config.json)

{{- if .Values.properties.webProxyHost }}
          # Update nifi.properties for web ui proxy hostname
          prop_replace nifi.web.proxy.host {{ .Values.properties.webProxyHost }}
{{- else }}
          prop_replace nifi.web.proxy.host {{ template "apache-nifi.fullname" . }}.{{ .Release.Namespace }}.svc
{{- end }}


{{- end }}

{{- if .Values.properties.safetyValve }}
  {{- range $prop, $val := .Values.properties.safetyValve }}
          prop_replace {{ $prop }} "{{ $val }}" nifi.properties
  {{- end }}
{{- end }}


          exec bin/nifi.sh run & nifi_pid="$!"

          function offloadNode() {
              FQDN=$(hostname -f)
              echo "disconnecting node '$FQDN'"
              {{- if .Values.properties.clusterSecure }}
              baseUrl=https://${FQDN}:{{ .Values.properties.httpsPort }}

              keystore=${NIFI_HOME}/config-data/certs/keystore.jks
              keystorePasswd=$(jq -r .keyStorePassword ${NIFI_HOME}/config-data/certs/config.json)
              keyPasswd=$(jq -r .keyPassword ${NIFI_HOME}/config-data/certs/config.json)
              truststore=${NIFI_HOME}/config-data/certs/truststore.jks
              truststorePasswd=$(jq -r .trustStorePassword ${NIFI_HOME}/config-data/certs/config.json)

              secureArgs=" --truststore ${truststore} --truststoreType JKS --truststorePasswd ${truststorePasswd} --keystore ${keystore} --keystoreType JKS --keystorePasswd ${keystorePasswd} --proxiedEntity "{{ .Values.auth.admin }}""
              {{- else }}
              baseUrl=http://${FQDN}:{{ .Values.properties.httpPort }}
              {{- end }}

              echo baseUrl ${baseUrl}
              echo "gracefully disconnecting node '$FQDN' from cluster"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
              nnid=$(jq --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .nodeId' nodes.json)
              echo "disconnecting node ${nnid}"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi disconnect-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "wait until node has state 'DISCONNECTED'"
              while [[ "${node_state}" != "DISCONNECTED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
              echo ""
              echo "node '${nnid}' was disconnected"
              echo "offloading node"
              ${NIFI_TOOLKT_HOME}/bin/cli.sh nifi offload-node -nnid $nnid -u ${baseUrl} ${secureArgs}
              echo ""
              echo "wait until node has state 'OFFLOADED'"
              while [[ "${node_state}" != "OFFLOADED" ]]; do
                  sleep 1
                  ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi get-nodes -ot json -u ${baseUrl} ${secureArgs} > nodes.json
                  node_state=$(jq -r --arg FQDN "$FQDN" '.cluster.nodes[] | select(.address==$FQDN) | .status' nodes.json)
                  echo "state is '${node_state}'"
              done
          }

          deleteNode() {
              echo "deleting node"
              ${NIFI_TOOLKIT_HOME}/bin/cli.sh nifi delete-node -nnid ${nnid} -u ${baseUrl} ${secureArgs}
              echo "node deleted"
          }

          trap 'echo Received trapped signal, beginning shutdown...;offloadNode;./bin/nifi.sh stop;deleteNode;exit 0;' TERM HUP INT;
          trap ":" EXIT

          echo NiFi running with PID ${nifi_pid}.
          wait ${nifi_pid}
          {{ if .Values.auth.ldap }}
          /opt/nifi/nifi-toolkit-current/bin/tls-toolkit.sh standalone -n '{{.Release.Name}}-nifi-0.{{.Release.Name}}-nifi-headless.{{.Release.Namespace}}.svc.cluster.local' -C '{{.Values.auth.ldap.admin}}' -o '/opt/nifi/nifi-current/conf/' -P {{.Values.auth.SSL.truststorePasswd}}  -S {{.Values.auth.SSL.keystorePasswd}}  --nifiPropertiesFile /opt/nifi/nifi-current/conf/nifi.properties
          exec bin/nifi.sh run
          {{ end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.metrics.prometheus.enabled }}
        - containerPort: {{ .Values.metrics.prometheus.port }}
          name: metrics
          protocol: TCP                  
{{- end }}
{{- if .Values.properties.httpsPort }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
{{- else }}
        - containerPort: {{ .Values.properties.httpPort }}
          name: http
          protocol: TCP
{{- end }}
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        env:
        - name: NIFI_ZOOKEEPER_CONNECT_STRING
          value: {{ template "zookeeper.url" . }}
{{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
{{- end }}
{{- if .Values.postStart }}
{{- if .Values.envFrom }}
        envFrom:
{{ toYaml .Values.envFrom | indent 8 }}
{{- end }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", {{ .Values.postStart | quote }}]
{{- end }}
{{- if .Values.properties.isNode }}
        readinessProbe:
          initialDelaySeconds: 120
          periodSeconds: 20
          failureThreshold: 5
          tcpSocket:
{{- if .Values.properties.httpsPort }}
            port: {{ .Values.properties.httpsPort }}
{{- else }}
            port: {{ .Values.properties.httpPort }}
{{- end }}
# {{- if .Values.properties.httpsPort }}
#               curl -kv \
#                 --cert ${NIFI_HOME}/config-data/certs/admin/crt.pem --cert-type PEM \
#                 --key ${NIFI_HOME}/config-data/certs/admin/key.pem --key-type PEM \
#                 https://$(hostname -f):{{ .Values.properties.httpsPort }}/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
# {{- else }}
#               curl -kv \
#                 http://$(hostname -f):{{ .Values.properties.httpPort }}/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
# {{- end }}
#               STATUS=$(jq -r ".cluster.nodes[] | select((.address==\"$(hostname -f)\") or .address==\"localhost\") | .status" $NIFI_BASE_DIR/data/cluster.state)

#               if [[ ! $STATUS = "CONNECTED" ]]; then
#                 echo "Node not found with CONNECTED state. Full cluster state:"
#                 jq . $NIFI_BASE_DIR/data/cluster.state
#                 exit 1
#               fi
# {{- end }}
        livenessProbe:
          initialDelaySeconds: 120
          periodSeconds: 90
          tcpSocket:
{{- if .Values.properties.httpsPort }}
            port: {{ .Values.properties.httpsPort }}
{{- else }}
            port: {{ .Values.properties.httpPort }}
{{- end }}
        startupProbe:
          failureThreshold: 10
          periodSeconds: 20
          tcpSocket:
{{- if .Values.properties.httpsPort }}
            port: {{ .Values.properties.httpsPort }}
{{- else }}
            port: {{ .Values.properties.httpPort }}
{{- end }}
        volumeMounts:
          - name: "nifidata"
            mountPath: /opt/nifi/data
            subPath: "data"
          - name: "nifidata"
            mountPath: /opt/nifi/nifi-current/auth-conf/
            subPath: "nifi-current/auth-conf"
{{- if .Values.properties.clusterSecure }}
          - name: "nifidata"
            mountPath: /opt/nifi/nifi-current/config-data
            subPath: "nifi-current/config-data"
{{- end }}
          - name: "nifidata"
            mountPath: /opt/nifi/flowfile_repository
            subPath: "flowfile_repository"
          - name: "nifidata"
            mountPath: /opt/nifi/content_repository
            subPath: "content_repository"
          - name: "nifidata"
            mountPath: /opt/nifi/provenance_repository
            subPath: "provenance_repository"
          - name: "nifidata"
            mountPath: /opt/nifi/nifi-current/logs
            subPath: "nifi-current/logs"
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "authorizers-empty"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
            subPath: "authorizers.empty"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.xml
            subPath: "login-identity-providers.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "flow-content"
            mountPath: /opt/nifi/data/flow.xml
            subPath: "flow.xml"
          - name: "generate-user"
            mountPath: /opt/nifi/nifi-current/config-data/certs/generate_user.sh
            subPath: "generate_user.sh"
          {{- range $secret := .Values.secrets }}
            {{- if $secret.mountPath }}
              {{- if $secret.keys }}
                {{- range $key := $secret.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- range $configmap := .Values.configmaps }}
            {{- if $configmap.mountPath }}
              {{- if $configmap.keys }}
                {{- range $key := $configmap.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}
          {{- end }}
# Get all config delete later
      - name: config
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command: ["/bin/sh", "-c", "--"]
        args: ["while true; do sleep 30;done;"]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: nifidata
          mountPath: /conf
      - name: app-log
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args: [tail, -n+1, -F, /var/log/nifi-app.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: nifidata
          mountPath: /var/log
          subPath: nifi-current/logs
      - name: bootstrap-log
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: nifidata
          mountPath: /var/log
          subPath: nifi-current/logs
      - name: user-log
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        args: [tail, -n+1, -F, /var/log/nifi-user.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: nifidata
          mountPath: /var/log
          subPath: nifi-current/logs
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "authorizers-empty"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers-empty.xml"
              path: "authorizers.empty"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers.xml"
              path: "login-identity-providers.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "flow-content"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "flow.xml"
              path: "flow.xml"
      - name: "generate-user"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "generate_user.sh"
              path: "generate_user.sh"
          defaultMode: 0555
      {{- range .Values.secrets }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        secret:
          secretName: {{ .name }}
      {{- end }}
      {{- range .Values.configmaps }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        configMap:
          name: {{ .name }}
      {{- end }}
{{- if not .Values.persistence.enabled }}
      - name: nifidata
        emptyDir: {}
{{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{- end }}
{{- if .Values.persistence.enabled }}
{{- if .Values.persistence.manual }}
  volumeClaimTemplates:
  - metadata:
      name: nifidata
    spec:
      selector:
        matchLabels:
          app: {{ include "apache-nifi.fullname" . }}
      accessModes:
      {{- range $.Values.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      storageClassName: "{{ .Values.persistence.nfs.storageClass }}"
      resources:
        requests:
          storage: {{ .Values.persistence.nifidata.size | quote }}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: nifidata
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.nifidata.size }}
{{- end }}
{{- end }}
