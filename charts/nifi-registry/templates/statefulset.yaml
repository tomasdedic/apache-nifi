apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "nifi-registry.fullname" . }}
  labels:
    {{- include "nifi-registry.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "nifi-registry.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "nifi-registry.fullname" . }}
  template:
    metadata:
{{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "nifi-registry.selectorLabels" . | nindent 8 }}
    spec:
{{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
{{- end }}
      serviceAccountName: {{ include "nifi-registry.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: take-data-dir-ownership
          image: alpine:3.6
          command:
            - sh
            - -c
            - |
              cd tree
              [ -d nifi-registry-current/database ] || mkdir -p nifi-registry-current/database
              [ -d nifi-registry-current/flow_storage ] || mkdir -p nifi-registry-current/flow_storage
              [ -d nifi-registry-current/certs ] || mkdir -p nifi-registry-current/certs
              chown -R 1000:1000 nifi-registry-current/database nifi-registry-current/flow_storage nifi-registry-current/certs
{{- if .Values.persistence.enabled }}
          volumeMounts:
            - name: "databaseflow-storage"
              mountPath: /tree
{{- end }}
{{- if .Values.properties.clusterSecure }}
        - name: cert-request
          imagePullPolicy: {{ .Values.global.tls.image.pullPolicy | quote }}
          image: "{{ .Values.global.tls.image.repository }}:{{ .Values.global.tls.image.tag }}"
          command:
            - bash
            - -c
            - |
              CERT_PATH="/opt/nifi-registry/nifi-registry-current/certs"
              CA_ADDRESS="{{ template "ca.server" . }}:{{ .Values.global.tls.caService.port }}"
              until echo "" | timeout -t 2 openssl s_client -connect "${CA_ADDRESS}"; do
                # Checking if ca server using nifi-toolkit is up
                echo "Waiting for CA to be available at ${CA_ADDRESS}"
                sleep 2
              done;
              # generate node cert function
              generate_node_cert() {
               ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client \
                -c "{{ template "ca.server" . }}" \
                -t {{ .Values.global.tls.token }} \
{{- if .Values.properties.webProxyHost }}
                --subjectAlternativeNames {{ .Values.properties.webProxyHost }}, $(hostname -f) \
{{- else }}
                --subjectAlternativeNames {{ template "nifi-registry.fullname" . }}.{{ .Release.Namespace }}.svc \
{{- end }}
                -D "CN=$(hostname -f), OU=NIFI" \
                -p {{ .Values.global.tls.caService.port }}
                }
              cd ${CERT_PATH}
              #certs generating (reuse old certs if available)
              # 1. nifi-registry node cert
              if [ ! -f config.json ] || [ ! -f keystore.jks ] || [ ! -f truststore.jks ];then 
                rm -f *
                generate_node_cert
              fi
          volumeMounts:
            - name: "databaseflow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/certs
              subPath: nifi-registry-current/certs
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - bash
            - -ce
            - |
              if ! test -f /opt/nifi-registry/nifi-registry-current/database/nifi-registry-primary.mv.db; then
                cp /opt/nifi-registry/nifi-registry-current/database/nifi-registry-primary.mv.db.temp /opt/nifi-registry/nifi-registry-current/database/nifi-registry-primary.mv.db
              fi
{{- if .Values.properties.clusterSecure }}
              export_tls_values() {
                CERT_PATH=/opt/nifi-registry/nifi-registry-current/certs
                export AUTH=tls
                export KEYSTORE_PATH=${CERT_HOME}/keystore.jks
                export KEYSTORE_TYPE=jks
                export KEYSTORE_PASSWORD=$(jq -r .keyStorePassword ${CERT_HOME}/config.json)
                export KEY_PASSWORD=$KEYSTORE_PASSWORD
                export TRUSTSTORE_PATH=${CERT_HOME}/trustore.jks
                export TRUSTSTORE_TYPE=jks
                export TRUSTSTORE_PASSWORD=$(jq -r .trustStorePassword ${CERT_HOME}/config.json
                export NIFI_REGISTRY_WEB_HTTPS_HOST=$(hostname -f)
                export INITIAL_ADMIN_IDENTITY="CN=admin, OU=NIFI"
              }
              export_tls_values
{{- end }}
                ${NIFI_REGISTRY_BASE_DIR}/scripts/start.sh
          ports:
{{- if .Values.properties.clusterSecure }}
            - name: https
              containerPort: 18443
              protocol: TCP
{{- else }}
            - name: http
              containerPort: 18080
              protocol: TCP
{{- end }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: "databaseflow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/database
              subPath: nifi-registry-current/database
            - name: "databaseflow-storage"
              mountPath: /opt/nifi-registry/nifi-registry-current/flow_storage
              subPath: nifi-registry-current/flow_storage
            {{- end }}
            - name: "default-database"
              mountPath: /opt/nifi-registry/nifi-registry-current/database/nifi-registry-primary.mv.db.temp
              subPath: "nifi-registry-primary.mv.db.temp"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: "default-database"
          secret:
            secretName: {{ include "nifi-registry.fullname" . }}-config
            items:
              - key: "default-database"
                path: "nifi-registry-primary.mv.db.temp"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: databaseflow-storage
    spec:
      accessModes:
      - ReadWriteOnce
      {{- if .Values.persistence.databaseflowStorage }}
      {{- if (eq "-" .Values.persistence.databaseflowStorage.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.databaseflowStorage.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.databaseflowStorage.size | quote }}
  {{- end }}
